/* tslint:disable */
/* eslint-disable */
/**
 * Dopt Users API
 * The Dopt Users API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BadRequestErrorResponseBody
 */
export interface BadRequestErrorResponseBody {
    /**
     * 
     * @type {BadRequestErrorResponseBodyCode}
     * @memberof BadRequestErrorResponseBody
     */
    'code': BadRequestErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof BadRequestErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface BadRequestErrorResponseBodyCode
 */
export interface BadRequestErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface IdentifyBulkRequestBodyInner
 */
export interface IdentifyBulkRequestBodyInner {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof IdentifyBulkRequestBodyInner
     */
    '__dopt_identifier': string;
}
/**
 * 
 * @export
 * @interface IdentifyBulkResponseBody
 */
export interface IdentifyBulkResponseBody {
    /**
     * 
     * @type {number}
     * @memberof IdentifyBulkResponseBody
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface IdentifyRequestParams
 */
export interface IdentifyRequestParams {
    /**
     * 
     * @type {string}
     * @memberof IdentifyRequestParams
     */
    'identifier': string;
}
/**
 * 
 * @export
 * @interface IdentifySegmentRequestBody
 */
export interface IdentifySegmentRequestBody {
    /**
     * 
     * @type {string}
     * @memberof IdentifySegmentRequestBody
     */
    'userId': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof IdentifySegmentRequestBody
     */
    'traits': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface IdentifySegmentResponseBody
 */
export interface IdentifySegmentResponseBody {
    /**
     * 
     * @type {number}
     * @memberof IdentifySegmentResponseBody
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface InternalServerErrorResponseBody
 */
export interface InternalServerErrorResponseBody {
    /**
     * 
     * @type {InternalServerErrorResponseBodyCode}
     * @memberof InternalServerErrorResponseBody
     */
    'code': InternalServerErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface InternalServerErrorResponseBodyCode
 */
export interface InternalServerErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface NotFoundErrorResponseBody
 */
export interface NotFoundErrorResponseBody {
    /**
     * 
     * @type {NotFoundErrorResponseBodyCode}
     * @memberof NotFoundErrorResponseBody
     */
    'code': NotFoundErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof NotFoundErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface NotFoundErrorResponseBodyCode
 */
export interface NotFoundErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface UnauthorizedErrorResponseBody
 */
export interface UnauthorizedErrorResponseBody {
    /**
     * 
     * @type {UnauthorizedErrorResponseBodyCode}
     * @memberof UnauthorizedErrorResponseBody
     */
    'code': UnauthorizedErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface UnauthorizedErrorResponseBodyCode
 */
export interface UnauthorizedErrorResponseBodyCode {
}

/**
 * IdentifyApi - axios parameter creator
 * @export
 */
export const IdentifyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identify: async (identifier: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('identify', 'identifier', identifier)
            const localVarPath = `/identify/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<IdentifyBulkRequestBodyInner>} [identifyBulkRequestBodyInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifyBulk: async (identifyBulkRequestBodyInner?: Array<IdentifyBulkRequestBodyInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identify/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identifyBulkRequestBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdentifySegmentRequestBody} [identifySegmentRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifySegment: async (identifySegmentRequestBody?: IdentifySegmentRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identify/segment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identifySegmentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentifyApi - functional programming interface
 * @export
 */
export const IdentifyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentifyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identify(identifier: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identify(identifier, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<IdentifyBulkRequestBodyInner>} [identifyBulkRequestBodyInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifyBulk(identifyBulkRequestBodyInner?: Array<IdentifyBulkRequestBodyInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentifyBulkResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifyBulk(identifyBulkRequestBodyInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdentifySegmentRequestBody} [identifySegmentRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifySegment(identifySegmentRequestBody?: IdentifySegmentRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifySegment(identifySegmentRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentifyApi - factory interface
 * @export
 */
export const IdentifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentifyApiFp(configuration)
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identify(identifier: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.identify(identifier, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<IdentifyBulkRequestBodyInner>} [identifyBulkRequestBodyInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifyBulk(identifyBulkRequestBodyInner?: Array<IdentifyBulkRequestBodyInner>, options?: any): AxiosPromise<IdentifyBulkResponseBody> {
            return localVarFp.identifyBulk(identifyBulkRequestBodyInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentifySegmentRequestBody} [identifySegmentRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifySegment(identifySegmentRequestBody?: IdentifySegmentRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.identifySegment(identifySegmentRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentifyApi - object-oriented interface
 * @export
 * @class IdentifyApi
 * @extends {BaseAPI}
 */
export class IdentifyApi extends BaseAPI {
    /**
     * 
     * @param {string} identifier 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentifyApi
     */
    public identify(identifier: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return IdentifyApiFp(this.configuration).identify(identifier, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<IdentifyBulkRequestBodyInner>} [identifyBulkRequestBodyInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentifyApi
     */
    public identifyBulk(identifyBulkRequestBodyInner?: Array<IdentifyBulkRequestBodyInner>, options?: AxiosRequestConfig) {
        return IdentifyApiFp(this.configuration).identifyBulk(identifyBulkRequestBodyInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentifySegmentRequestBody} [identifySegmentRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentifyApi
     */
    public identifySegment(identifySegmentRequestBody?: IdentifySegmentRequestBody, options?: AxiosRequestConfig) {
        return IdentifyApiFp(this.configuration).identifySegment(identifySegmentRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


