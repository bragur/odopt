/* tslint:disable */
/* eslint-disable */
/**
 * Switchboard Blocks API
 * The Switchboard Blocks API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BadRequestErrorResponseBody
 */
export interface BadRequestErrorResponseBody {
    /**
     * 
     * @type {BadRequestErrorResponseBodyCode}
     * @memberof BadRequestErrorResponseBody
     */
    'code': BadRequestErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof BadRequestErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface BadRequestErrorResponseBodyCode
 */
export interface BadRequestErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface BlockIntentRequestParams
 */
export interface BlockIntentRequestParams {
    /**
     * 
     * @type {string}
     * @memberof BlockIntentRequestParams
     */
    'uid': string;
    /**
     * 
     * @type {V1BlockUidGetIntentParameter}
     * @memberof BlockIntentRequestParams
     */
    'intent'?: V1BlockUidGetIntentParameter;
}
/**
 * 
 * @export
 * @interface BlockQueryString
 */
export interface BlockQueryString {
    /**
     * 
     * @type {number}
     * @memberof BlockQueryString
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof BlockQueryString
     */
    'userIdentifier': string;
    /**
     * 
     * @type {string}
     * @memberof BlockQueryString
     */
    'groupIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface BlockRequestParams
 */
export interface BlockRequestParams {
    /**
     * 
     * @type {string}
     * @memberof BlockRequestParams
     */
    'uid': string;
    /**
     * 
     * @type {V1BlockUidGetIntentParameter}
     * @memberof BlockRequestParams
     */
    'intent'?: V1BlockUidGetIntentParameter;
}
/**
 * 
 * @export
 * @interface FlowIntentRequestParams
 */
export interface FlowIntentRequestParams {
    /**
     * 
     * @type {string}
     * @memberof FlowIntentRequestParams
     */
    'uid': string;
    /**
     * 
     * @type {V1FlowUidIntentPostIntentParameter}
     * @memberof FlowIntentRequestParams
     */
    'intent'?: V1FlowUidIntentPostIntentParameter;
}
/**
 * 
 * @export
 * @interface FlowQueryString
 */
export interface FlowQueryString {
    /**
     * 
     * @type {number}
     * @memberof FlowQueryString
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof FlowQueryString
     */
    'userIdentifier': string;
    /**
     * 
     * @type {string}
     * @memberof FlowQueryString
     */
    'groupIdentifier'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FlowQueryString
     */
    'include[block]'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FlowQueryString
     */
    'include[block][journey]'?: boolean;
}
/**
 * 
 * @export
 * @interface FlowRequestParams
 */
export interface FlowRequestParams {
    /**
     * 
     * @type {string}
     * @memberof FlowRequestParams
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowRequestParams
     */
    'intent'?: string;
}
/**
 * 
 * @export
 * @interface FlowResponseBody
 */
export interface FlowResponseBody {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBody
     */
    'kind': FlowResponseBodyKindEnum;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBody
     */
    'type': FlowResponseBodyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBody
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBody
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof FlowResponseBody
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyState}
     * @memberof FlowResponseBody
     */
    'state': FlowResponseBodyState;
    /**
     * 
     * @type {Array<FlowResponseBodyBlocksInner>}
     * @memberof FlowResponseBody
     */
    'blocks'?: Array<FlowResponseBodyBlocksInner>;
}

export const FlowResponseBodyKindEnum = {
    Flow: 'flow'
} as const;

export type FlowResponseBodyKindEnum = typeof FlowResponseBodyKindEnum[keyof typeof FlowResponseBodyKindEnum];
export const FlowResponseBodyTypeEnum = {
    Flow: 'flow'
} as const;

export type FlowResponseBodyTypeEnum = typeof FlowResponseBodyTypeEnum[keyof typeof FlowResponseBodyTypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInner
 */
export interface FlowResponseBodyBlocksInner {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInner
     */
    'kind': FlowResponseBodyBlocksInnerKindEnum;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInner
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInner
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof FlowResponseBodyBlocksInner
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof FlowResponseBodyBlocksInner
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInner
     */
    'type': FlowResponseBodyBlocksInnerTypeEnum;
    /**
     * 
     * @type {Array<FlowResponseBodyBlocksInnerAnyOfFieldsInner>}
     * @memberof FlowResponseBodyBlocksInner
     */
    'fields': Array<FlowResponseBodyBlocksInnerAnyOfFieldsInner>;
    /**
     * 
     * @type {number}
     * @memberof FlowResponseBodyBlocksInner
     */
    'size': number;
    /**
     * 
     * @type {Array<Model>}
     * @memberof FlowResponseBodyBlocksInner
     */
    'blocks': Array<Model>;
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyBlocksInner
     */
    'ordered'?: boolean;
}

export const FlowResponseBodyBlocksInnerKindEnum = {
    Block: 'block'
} as const;

export type FlowResponseBodyBlocksInnerKindEnum = typeof FlowResponseBodyBlocksInnerKindEnum[keyof typeof FlowResponseBodyBlocksInnerKindEnum];
export const FlowResponseBodyBlocksInnerTypeEnum = {
    Set: 'set'
} as const;

export type FlowResponseBodyBlocksInnerTypeEnum = typeof FlowResponseBodyBlocksInnerTypeEnum[keyof typeof FlowResponseBodyBlocksInnerTypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOf
 */
export interface FlowResponseBodyBlocksInnerAnyOf {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'kind': FlowResponseBodyBlocksInnerAnyOfKindEnum;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'type': FlowResponseBodyBlocksInnerAnyOfTypeEnum;
    /**
     * 
     * @type {Array<FlowResponseBodyBlocksInnerAnyOfFieldsInner>}
     * @memberof FlowResponseBodyBlocksInnerAnyOf
     */
    'fields': Array<FlowResponseBodyBlocksInnerAnyOfFieldsInner>;
}

export const FlowResponseBodyBlocksInnerAnyOfKindEnum = {
    Block: 'block'
} as const;

export type FlowResponseBodyBlocksInnerAnyOfKindEnum = typeof FlowResponseBodyBlocksInnerAnyOfKindEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOfKindEnum];
export const FlowResponseBodyBlocksInnerAnyOfTypeEnum = {
    Model: 'model'
} as const;

export type FlowResponseBodyBlocksInnerAnyOfTypeEnum = typeof FlowResponseBodyBlocksInnerAnyOfTypeEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOf1
 */
export interface FlowResponseBodyBlocksInnerAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'kind': FlowResponseBodyBlocksInnerAnyOf1KindEnum;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {number}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'size': number;
    /**
     * 
     * @type {Array<Model>}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'blocks': Array<Model>;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'type': FlowResponseBodyBlocksInnerAnyOf1TypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyBlocksInnerAnyOf1
     */
    'ordered'?: boolean;
}

export const FlowResponseBodyBlocksInnerAnyOf1KindEnum = {
    Block: 'block'
} as const;

export type FlowResponseBodyBlocksInnerAnyOf1KindEnum = typeof FlowResponseBodyBlocksInnerAnyOf1KindEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOf1KindEnum];
export const FlowResponseBodyBlocksInnerAnyOf1TypeEnum = {
    Set: 'set'
} as const;

export type FlowResponseBodyBlocksInnerAnyOf1TypeEnum = typeof FlowResponseBodyBlocksInnerAnyOf1TypeEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInner
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInner {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInner
     */
    'sid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInner
     */
    'type': FlowResponseBodyBlocksInnerAnyOfFieldsInnerTypeEnum;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2Value}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInner
     */
    'value': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2Value;
}

export const FlowResponseBodyBlocksInnerAnyOfFieldsInnerTypeEnum = {
    Boolean: 'boolean'
} as const;

export type FlowResponseBodyBlocksInnerAnyOfFieldsInnerTypeEnum = typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerTypeEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerTypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf
     */
    'sid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf
     */
    'type': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfTypeEnum;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfValue}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf
     */
    'value': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfValue;
}

export const FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfTypeEnum = {
    String: 'string'
} as const;

export type FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfTypeEnum = typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfTypeEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1
     */
    'sid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1
     */
    'type': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1TypeEnum;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1Value}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1
     */
    'value': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1Value;
}

export const FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1TypeEnum = {
    Integer: 'integer'
} as const;

export type FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1TypeEnum = typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1TypeEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1Value
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf1Value {
}
/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2 {
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2
     */
    'sid': string;
    /**
     * 
     * @type {string}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2
     */
    'type': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2TypeEnum;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2Value}
     * @memberof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2
     */
    'value': FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2Value;
}

export const FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2TypeEnum = {
    Boolean: 'boolean'
} as const;

export type FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2TypeEnum = typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2TypeEnum[keyof typeof FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2TypeEnum];

/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2Value
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOf2Value {
}
/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfValue
 */
export interface FlowResponseBodyBlocksInnerAnyOfFieldsInnerAnyOfValue {
}
/**
 * 
 * @export
 * @interface FlowResponseBodyBlocksInnerAnyOfState
 */
export interface FlowResponseBodyBlocksInnerAnyOfState {
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyBlocksInnerAnyOfState
     */
    'active': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyBlocksInnerAnyOfState
     */
    'completed': boolean;
}
/**
 * 
 * @export
 * @interface FlowResponseBodyState
 */
export interface FlowResponseBodyState {
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyState
     */
    'exited': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyState
     */
    'started': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FlowResponseBodyState
     */
    'completed': boolean;
}
/**
 * 
 * @export
 * @interface GoToQueryString
 */
export interface GoToQueryString {
    /**
     * 
     * @type {number}
     * @memberof GoToQueryString
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof GoToQueryString
     */
    'userIdentifier': string;
    /**
     * 
     * @type {string}
     * @memberof GoToQueryString
     */
    'groupIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoToQueryString
     */
    'blockUid': string;
}
/**
 * 
 * @export
 * @interface HealthCheckResponseBody
 */
export interface HealthCheckResponseBody {
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponseBody
     */
    'application': string;
    /**
     * 
     * @type {number}
     * @memberof HealthCheckResponseBody
     */
    'status': number;
}
/**
 * 
 * @export
 * @interface InternalServerErrorResponseBody
 */
export interface InternalServerErrorResponseBody {
    /**
     * 
     * @type {InternalServerErrorResponseBodyCode}
     * @memberof InternalServerErrorResponseBody
     */
    'code': InternalServerErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface InternalServerErrorResponseBodyCode
 */
export interface InternalServerErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'kind': ModelKindEnum;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof Model
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'type': ModelTypeEnum;
    /**
     * 
     * @type {Array<FlowResponseBodyBlocksInnerAnyOfFieldsInner>}
     * @memberof Model
     */
    'fields': Array<FlowResponseBodyBlocksInnerAnyOfFieldsInner>;
}

export const ModelKindEnum = {
    Block: 'block'
} as const;

export type ModelKindEnum = typeof ModelKindEnum[keyof typeof ModelKindEnum];
export const ModelTypeEnum = {
    Model: 'model'
} as const;

export type ModelTypeEnum = typeof ModelTypeEnum[keyof typeof ModelTypeEnum];

/**
 * 
 * @export
 * @interface ModelSet
 */
export interface ModelSet {
    /**
     * 
     * @type {string}
     * @memberof ModelSet
     */
    'kind': ModelSetKindEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelSet
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ModelSet
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof ModelSet
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof ModelSet
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {number}
     * @memberof ModelSet
     */
    'size': number;
    /**
     * 
     * @type {Array<Model>}
     * @memberof ModelSet
     */
    'blocks': Array<Model>;
    /**
     * 
     * @type {string}
     * @memberof ModelSet
     */
    'type': ModelSetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ModelSet
     */
    'ordered'?: boolean;
}

export const ModelSetKindEnum = {
    Block: 'block'
} as const;

export type ModelSetKindEnum = typeof ModelSetKindEnum[keyof typeof ModelSetKindEnum];
export const ModelSetTypeEnum = {
    Set: 'set'
} as const;

export type ModelSetTypeEnum = typeof ModelSetTypeEnum[keyof typeof ModelSetTypeEnum];

/**
 * 
 * @export
 * @interface NotFoundErrorResponseBody
 */
export interface NotFoundErrorResponseBody {
    /**
     * 
     * @type {NotFoundErrorResponseBodyCode}
     * @memberof NotFoundErrorResponseBody
     */
    'code': NotFoundErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof NotFoundErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface NotFoundErrorResponseBodyCode
 */
export interface NotFoundErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface SerializableBlock
 */
export interface SerializableBlock {
    /**
     * 
     * @type {string}
     * @memberof SerializableBlock
     */
    'kind': SerializableBlockKindEnum;
    /**
     * 
     * @type {string}
     * @memberof SerializableBlock
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof SerializableBlock
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof SerializableBlock
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof SerializableBlock
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {string}
     * @memberof SerializableBlock
     */
    'type': SerializableBlockTypeEnum;
    /**
     * 
     * @type {Array<object>}
     * @memberof SerializableBlock
     */
    'fields': Array<object>;
    /**
     * 
     * @type {number}
     * @memberof SerializableBlock
     */
    'size': number;
    /**
     * 
     * @type {Array<Model>}
     * @memberof SerializableBlock
     */
    'blocks': Array<Model>;
    /**
     * 
     * @type {boolean}
     * @memberof SerializableBlock
     */
    'ordered'?: boolean;
}

export const SerializableBlockKindEnum = {
    Block: 'block'
} as const;

export type SerializableBlockKindEnum = typeof SerializableBlockKindEnum[keyof typeof SerializableBlockKindEnum];
export const SerializableBlockTypeEnum = {
    Set: 'set'
} as const;

export type SerializableBlockTypeEnum = typeof SerializableBlockTypeEnum[keyof typeof SerializableBlockTypeEnum];

/**
 * 
 * @export
 * @interface SerializableBlockAnyOf
 */
export interface SerializableBlockAnyOf {
    /**
     * 
     * @type {string}
     * @memberof SerializableBlockAnyOf
     */
    'kind': SerializableBlockAnyOfKindEnum;
    /**
     * 
     * @type {string}
     * @memberof SerializableBlockAnyOf
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof SerializableBlockAnyOf
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof SerializableBlockAnyOf
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyBlocksInnerAnyOfState}
     * @memberof SerializableBlockAnyOf
     */
    'state': FlowResponseBodyBlocksInnerAnyOfState;
    /**
     * 
     * @type {string}
     * @memberof SerializableBlockAnyOf
     */
    'type': SerializableBlockAnyOfTypeEnum;
    /**
     * 
     * @type {Array<object>}
     * @memberof SerializableBlockAnyOf
     */
    'fields': Array<object>;
}

export const SerializableBlockAnyOfKindEnum = {
    Block: 'block'
} as const;

export type SerializableBlockAnyOfKindEnum = typeof SerializableBlockAnyOfKindEnum[keyof typeof SerializableBlockAnyOfKindEnum];
export const SerializableBlockAnyOfTypeEnum = {
    Model: 'model'
} as const;

export type SerializableBlockAnyOfTypeEnum = typeof SerializableBlockAnyOfTypeEnum[keyof typeof SerializableBlockAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface SerializableFlow
 */
export interface SerializableFlow {
    /**
     * 
     * @type {string}
     * @memberof SerializableFlow
     */
    'kind': SerializableFlowKindEnum;
    /**
     * 
     * @type {string}
     * @memberof SerializableFlow
     */
    'type': SerializableFlowTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SerializableFlow
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof SerializableFlow
     */
    'sid': string;
    /**
     * 
     * @type {number}
     * @memberof SerializableFlow
     */
    'version': number;
    /**
     * 
     * @type {FlowResponseBodyState}
     * @memberof SerializableFlow
     */
    'state': FlowResponseBodyState;
}

export const SerializableFlowKindEnum = {
    Flow: 'flow'
} as const;

export type SerializableFlowKindEnum = typeof SerializableFlowKindEnum[keyof typeof SerializableFlowKindEnum];
export const SerializableFlowTypeEnum = {
    Flow: 'flow'
} as const;

export type SerializableFlowTypeEnum = typeof SerializableFlowTypeEnum[keyof typeof SerializableFlowTypeEnum];

/**
 * 
 * @export
 * @interface TimeoutErrorResponseBody
 */
export interface TimeoutErrorResponseBody {
    /**
     * 
     * @type {InternalServerErrorResponseBodyCode}
     * @memberof TimeoutErrorResponseBody
     */
    'code': InternalServerErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof TimeoutErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface UnauthorizedErrorResponseBody
 */
export interface UnauthorizedErrorResponseBody {
    /**
     * 
     * @type {UnauthorizedErrorResponseBodyCode}
     * @memberof UnauthorizedErrorResponseBody
     */
    'code': UnauthorizedErrorResponseBodyCode;
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedErrorResponseBody
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface UnauthorizedErrorResponseBodyCode
 */
export interface UnauthorizedErrorResponseBodyCode {
}
/**
 * 
 * @export
 * @interface V1BlockUidGetIntentParameter
 */
export interface V1BlockUidGetIntentParameter {
}
/**
 * 
 * @export
 * @enum {string}
 */

export const V1BlockUidGetIntentParameterAnyOf = {
    Next: 'next'
} as const;

export type V1BlockUidGetIntentParameterAnyOf = typeof V1BlockUidGetIntentParameterAnyOf[keyof typeof V1BlockUidGetIntentParameterAnyOf];


/**
 * 
 * @export
 * @enum {string}
 */

export const V1BlockUidGetIntentParameterAnyOf1 = {
    Prev: 'prev'
} as const;

export type V1BlockUidGetIntentParameterAnyOf1 = typeof V1BlockUidGetIntentParameterAnyOf1[keyof typeof V1BlockUidGetIntentParameterAnyOf1];


/**
 * 
 * @export
 * @enum {string}
 */

export const V1BlockUidGetIntentParameterAnyOf2 = {
    GoTo: 'goTo'
} as const;

export type V1BlockUidGetIntentParameterAnyOf2 = typeof V1BlockUidGetIntentParameterAnyOf2[keyof typeof V1BlockUidGetIntentParameterAnyOf2];


/**
 * 
 * @export
 * @interface V1FlowUidIntentPostIntentParameter
 */
export interface V1FlowUidIntentPostIntentParameter {
}
/**
 * 
 * @export
 * @interface V1FlowUidIntentPostIntentParameterAnyOf
 */
export interface V1FlowUidIntentPostIntentParameterAnyOf {
}
/**
 * 
 * @export
 * @enum {string}
 */

export const V1FlowUidIntentPostIntentParameterAnyOfAnyOf = {
    Complete: 'complete'
} as const;

export type V1FlowUidIntentPostIntentParameterAnyOfAnyOf = typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf[keyof typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf];


/**
 * 
 * @export
 * @enum {string}
 */

export const V1FlowUidIntentPostIntentParameterAnyOfAnyOf1 = {
    Exit: 'exit'
} as const;

export type V1FlowUidIntentPostIntentParameterAnyOfAnyOf1 = typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf1[keyof typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf1];


/**
 * 
 * @export
 * @enum {string}
 */

export const V1FlowUidIntentPostIntentParameterAnyOfAnyOf2 = {
    Reset: 'reset'
} as const;

export type V1FlowUidIntentPostIntentParameterAnyOfAnyOf2 = typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf2[keyof typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf2];


/**
 * 
 * @export
 * @enum {string}
 */

export const V1FlowUidIntentPostIntentParameterAnyOfAnyOf3 = {
    Start: 'start'
} as const;

export type V1FlowUidIntentPostIntentParameterAnyOfAnyOf3 = typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf3[keyof typeof V1FlowUidIntentPostIntentParameterAnyOfAnyOf3];



/**
 * APIApi - axios parameter creator
 * @export
 */
export const APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1BlockUidGet: async (version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('v1BlockUidGet', 'version', version)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('v1BlockUidGet', 'userIdentifier', userIdentifier)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('v1BlockUidGet', 'uid', uid)
            // verify required parameter 'intent' is not null or undefined
            assertParamExists('v1BlockUidGet', 'intent', intent)
            const localVarPath = `/v1/block/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"intent"}}`, encodeURIComponent(String(intent)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (groupIdentifier !== undefined) {
                localVarQueryParameter['groupIdentifier'] = groupIdentifier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} blockUid 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1BlockUidGoToPost: async (version: number, userIdentifier: string, blockUid: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('v1BlockUidGoToPost', 'version', version)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('v1BlockUidGoToPost', 'userIdentifier', userIdentifier)
            // verify required parameter 'blockUid' is not null or undefined
            assertParamExists('v1BlockUidGoToPost', 'blockUid', blockUid)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('v1BlockUidGoToPost', 'uid', uid)
            // verify required parameter 'intent' is not null or undefined
            assertParamExists('v1BlockUidGoToPost', 'intent', intent)
            const localVarPath = `/v1/block/{uid}/goTo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"intent"}}`, encodeURIComponent(String(intent)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (groupIdentifier !== undefined) {
                localVarQueryParameter['groupIdentifier'] = groupIdentifier;
            }

            if (blockUid !== undefined) {
                localVarQueryParameter['blockUid'] = blockUid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1BlockUidIntentPost: async (version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('v1BlockUidIntentPost', 'version', version)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('v1BlockUidIntentPost', 'userIdentifier', userIdentifier)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('v1BlockUidIntentPost', 'uid', uid)
            // verify required parameter 'intent' is not null or undefined
            assertParamExists('v1BlockUidIntentPost', 'intent', intent)
            const localVarPath = `/v1/block/{uid}/{intent}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"intent"}}`, encodeURIComponent(String(intent)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (groupIdentifier !== undefined) {
                localVarQueryParameter['groupIdentifier'] = groupIdentifier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {string} intent 
         * @param {string} [groupIdentifier] 
         * @param {boolean} [includeBlock] 
         * @param {boolean} [includeBlockJourney] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FlowUidGet: async (version: number, userIdentifier: string, uid: string, intent: string, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('v1FlowUidGet', 'version', version)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('v1FlowUidGet', 'userIdentifier', userIdentifier)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('v1FlowUidGet', 'uid', uid)
            // verify required parameter 'intent' is not null or undefined
            assertParamExists('v1FlowUidGet', 'intent', intent)
            const localVarPath = `/v1/flow/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"intent"}}`, encodeURIComponent(String(intent)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (groupIdentifier !== undefined) {
                localVarQueryParameter['groupIdentifier'] = groupIdentifier;
            }

            if (includeBlock !== undefined) {
                localVarQueryParameter['include[block]'] = includeBlock;
            }

            if (includeBlockJourney !== undefined) {
                localVarQueryParameter['include[block][journey]'] = includeBlockJourney;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1FlowUidIntentPostIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {boolean} [includeBlock] 
         * @param {boolean} [includeBlockJourney] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FlowUidIntentPost: async (version: number, userIdentifier: string, uid: string, intent: V1FlowUidIntentPostIntentParameter, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('v1FlowUidIntentPost', 'version', version)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('v1FlowUidIntentPost', 'userIdentifier', userIdentifier)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('v1FlowUidIntentPost', 'uid', uid)
            // verify required parameter 'intent' is not null or undefined
            assertParamExists('v1FlowUidIntentPost', 'intent', intent)
            const localVarPath = `/v1/flow/{uid}/{intent}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"intent"}}`, encodeURIComponent(String(intent)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (groupIdentifier !== undefined) {
                localVarQueryParameter['groupIdentifier'] = groupIdentifier;
            }

            if (includeBlock !== undefined) {
                localVarQueryParameter['include[block]'] = includeBlock;
            }

            if (includeBlockJourney !== undefined) {
                localVarQueryParameter['include[block][journey]'] = includeBlockJourney;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIApi - functional programming interface
 * @export
 */
export const APIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1BlockUidGet(version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SerializableBlock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1BlockUidGet(version, userIdentifier, uid, intent, groupIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} blockUid 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1BlockUidGoToPost(version: number, userIdentifier: string, blockUid: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1BlockUidGoToPost(version, userIdentifier, blockUid, uid, intent, groupIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1BlockUidIntentPost(version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1BlockUidIntentPost(version, userIdentifier, uid, intent, groupIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {string} intent 
         * @param {string} [groupIdentifier] 
         * @param {boolean} [includeBlock] 
         * @param {boolean} [includeBlockJourney] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FlowUidGet(version: number, userIdentifier: string, uid: string, intent: string, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FlowUidGet(version, userIdentifier, uid, intent, groupIdentifier, includeBlock, includeBlockJourney, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1FlowUidIntentPostIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {boolean} [includeBlock] 
         * @param {boolean} [includeBlockJourney] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FlowUidIntentPost(version: number, userIdentifier: string, uid: string, intent: V1FlowUidIntentPostIntentParameter, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FlowUidIntentPost(version, userIdentifier, uid, intent, groupIdentifier, includeBlock, includeBlockJourney, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APIApi - factory interface
 * @export
 */
export const APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APIApiFp(configuration)
    return {
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1BlockUidGet(version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: any): AxiosPromise<SerializableBlock> {
            return localVarFp.v1BlockUidGet(version, userIdentifier, uid, intent, groupIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} blockUid 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1BlockUidGoToPost(version: number, userIdentifier: string, blockUid: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1BlockUidGoToPost(version, userIdentifier, blockUid, uid, intent, groupIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1BlockUidGetIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1BlockUidIntentPost(version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1BlockUidIntentPost(version, userIdentifier, uid, intent, groupIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {string} intent 
         * @param {string} [groupIdentifier] 
         * @param {boolean} [includeBlock] 
         * @param {boolean} [includeBlockJourney] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FlowUidGet(version: number, userIdentifier: string, uid: string, intent: string, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options?: any): AxiosPromise<FlowResponseBody> {
            return localVarFp.v1FlowUidGet(version, userIdentifier, uid, intent, groupIdentifier, includeBlock, includeBlockJourney, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} version 
         * @param {string} userIdentifier 
         * @param {string} uid 
         * @param {V1FlowUidIntentPostIntentParameter} intent 
         * @param {string} [groupIdentifier] 
         * @param {boolean} [includeBlock] 
         * @param {boolean} [includeBlockJourney] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FlowUidIntentPost(version: number, userIdentifier: string, uid: string, intent: V1FlowUidIntentPostIntentParameter, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.v1FlowUidIntentPost(version, userIdentifier, uid, intent, groupIdentifier, includeBlock, includeBlockJourney, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIApi - object-oriented interface
 * @export
 * @class APIApi
 * @extends {BaseAPI}
 */
export class APIApi extends BaseAPI {
    /**
     * 
     * @param {number} version 
     * @param {string} userIdentifier 
     * @param {string} uid 
     * @param {V1BlockUidGetIntentParameter} intent 
     * @param {string} [groupIdentifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public v1BlockUidGet(version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: AxiosRequestConfig) {
        return APIApiFp(this.configuration).v1BlockUidGet(version, userIdentifier, uid, intent, groupIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} version 
     * @param {string} userIdentifier 
     * @param {string} blockUid 
     * @param {string} uid 
     * @param {V1BlockUidGetIntentParameter} intent 
     * @param {string} [groupIdentifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public v1BlockUidGoToPost(version: number, userIdentifier: string, blockUid: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: AxiosRequestConfig) {
        return APIApiFp(this.configuration).v1BlockUidGoToPost(version, userIdentifier, blockUid, uid, intent, groupIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} version 
     * @param {string} userIdentifier 
     * @param {string} uid 
     * @param {V1BlockUidGetIntentParameter} intent 
     * @param {string} [groupIdentifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public v1BlockUidIntentPost(version: number, userIdentifier: string, uid: string, intent: V1BlockUidGetIntentParameter, groupIdentifier?: string, options?: AxiosRequestConfig) {
        return APIApiFp(this.configuration).v1BlockUidIntentPost(version, userIdentifier, uid, intent, groupIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} version 
     * @param {string} userIdentifier 
     * @param {string} uid 
     * @param {string} intent 
     * @param {string} [groupIdentifier] 
     * @param {boolean} [includeBlock] 
     * @param {boolean} [includeBlockJourney] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public v1FlowUidGet(version: number, userIdentifier: string, uid: string, intent: string, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options?: AxiosRequestConfig) {
        return APIApiFp(this.configuration).v1FlowUidGet(version, userIdentifier, uid, intent, groupIdentifier, includeBlock, includeBlockJourney, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} version 
     * @param {string} userIdentifier 
     * @param {string} uid 
     * @param {V1FlowUidIntentPostIntentParameter} intent 
     * @param {string} [groupIdentifier] 
     * @param {boolean} [includeBlock] 
     * @param {boolean} [includeBlockJourney] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public v1FlowUidIntentPost(version: number, userIdentifier: string, uid: string, intent: V1FlowUidIntentPostIntentParameter, groupIdentifier?: string, includeBlock?: boolean, includeBlockJourney?: boolean, options?: AxiosRequestConfig) {
        return APIApiFp(this.configuration).v1FlowUidIntentPost(version, userIdentifier, uid, intent, groupIdentifier, includeBlock, includeBlockJourney, options).then((request) => request(this.axios, this.basePath));
    }
}


